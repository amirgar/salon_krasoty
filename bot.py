import telebot
from telebot import types
from string import Template
import logging

token = "7116388354:AAGUoOwFEDfYJCxF2UUgxcd1S5KtidEq_y0"
link = 't.me/saloon_krasoty2_bot'
password = '12345678'
chat_idd = -1002202544493

bot = telebot.TeleBot(token)


user_dict = {}

class User:
    def __init__(self, city):
        self.city = city

        keys = ['fullname', 'phone', 'month', 'date', 'type', 'time']

        for key in keys:
            self.key = None


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú—ã —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã "–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã". '
                                      '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–∫–æ–≤ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º. –ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞–∂–º–∏—Ç–µ /regüåπüåπüåπ', reply_markup=markup)

@bot.message_handler(commands=['about'])
def send_about(message):
    bot.send_message(message.chat.id, '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –∫ –≤—Ä–∞—á—É.')


@bot.message_handler(commands=['reg'])
def process_reg(message):
    try:
        chat_id = message.chat.id
        user_dict[chat_id] = User("–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã")
        markup = types.ReplyKeyboardRemove(selective=False)

        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:', reply_markup=markup)
        bot.register_next_step_handler(msg, process_reg_step2)
    except Exception as e:
        bot.reply_to(message, '–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')

def process_reg_step2(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.fullname = message.text

        msg  = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ')
        bot.register_next_step_handler(msg, process_reg_step3)
    except Exception as e:
        bot.reply_to(message, '–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')

def process_reg_step3(message):
    try:
        int(message.text)

        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.phone = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        itembtn1 = types.KeyboardButton('–Ø–Ω–≤–∞—Ä—å')
        itembtn2 = types.KeyboardButton('–§–µ–≤—Ä–∞–ª—å')
        itembtn3 = types.KeyboardButton('–ú–∞—Ä—Ç')
        itembtn4 = types.KeyboardButton('–ê–ø—Ä–µ–ª—å')
        itembtn5 = types.KeyboardButton('–ú–∞–π')
        itembtn6 = types.KeyboardButton('–ò—é–Ω—å')
        itembtn7 = types.KeyboardButton('–ò—é–ª—å')
        itembtn8 = types.KeyboardButton('–ê–≤–≥—É—Å—Ç')
        itembtn9 = types.KeyboardButton('–°–µ–Ω—Ç—è–±—Ä—å')
        itembtn10 = types.KeyboardButton('–û–∫—Ç—è–±—Ä—å')
        itembtn11 = types.KeyboardButton('–ù–æ—è–±—Ä—å')
        itembtn12 = types.KeyboardButton('–î–µ–∫–∞–±—Ä—å')
        markup.add(itembtn1, itembtn2, itembtn3, itembtn4, itembtn5, itembtn6, itembtn7, itembtn8, itembtn9,
                   itembtn10, itembtn11, itembtn12)
        msg = bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –ø—Ä–∏–µ–º–∞: ', reply_markup=markup)
        bot.register_next_step_handler(msg, process_reg_step4)
    except Exception as e:
        bot.reply_to(message, '–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')


def process_reg_step4(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.month = message.text
        markup = types.ReplyKeyboardRemove()
        msg = bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –ø—Ä–∏–µ–º–∞: ', reply_markup=markup   )
        bot.register_next_step_handler(msg, process_reg_step5)
    except Exception as e:
        bot.reply_to(message, '–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')

def process_reg_step5(message):
    try:
        markup = types.ReplyKeyboardRemove(selective=False)
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.date = message.text

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        itembtn1 = types.KeyboardButton('–ú–∞–Ω–∏–∫—é—Ä')
        itembtn2 = types.KeyboardButton('–ü–µ–¥–∏–∫—é—Ä')
        itembtn3 = types.KeyboardButton('–°—Ç—Ä–∏–∂–∫–∞')
        markup.add(itembtn1, itembtn2, itembtn3)

        msg = bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–µ–º–∞: ', reply_markup=markup)
        bot.register_next_step_handler(msg, process_reg_step6)
    except Exception as e:
        bot.reply_to(message, '–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')

def process_reg_step6(message):
    try:
        markup = types.ReplyKeyboardRemove(selective=False)
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.type = message.text

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        itembtn1 = types.KeyboardButton('9:00')
        itembtn2 = types.KeyboardButton('10:00')
        itembtn3 = types.KeyboardButton('11:00')
        itembtn4 = types.KeyboardButton('12:00')
        itembtn5 = types.KeyboardButton('13:00')
        itembtn6 = types.KeyboardButton('14:00')
        itembtn7 = types.KeyboardButton('15:00')
        itembtn8 = types.KeyboardButton('16:00')
        itembtn9 = types.KeyboardButton('17:00')
        itembtn10 = types.KeyboardButton('18:00')
        markup.add(itembtn1, itembtn2, itembtn3, itembtn4, itembtn5, itembtn6, itembtn7, itembtn8, itembtn9, itembtn10)

        msg = bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞: ', reply_markup=markup)
        bot.register_next_step_handler(msg, process_reg_step7)
    except Exception as e:
        bot.reply_to(message, '–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')


def process_reg_step7(message):
    global chat_idd
    chat_id = message.chat.id
    userr = message.from_user.username
    user = user_dict[chat_id]
    user.time = message.text

    bot.send_message(chat_id, getRegData(user, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞'), parse_mode="markdown")
    bot.send_message(chat_idd, sendRegData(user, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', userr), parse_mode="markdown")


def sendRegData(user, title, name=''):
    t = Template(
        '$title \n –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è: *$fullname* \n –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: *$phone* \n –ú–µ—Å—è—Ü –ø—Ä–∏–µ–º–∞: *$month* \n '
        '–î–µ–Ω—å –ø—Ä–∏–µ–º–∞: *$date* \n –¢–∏–ø –ø—Ä–∏–µ–º–∞: *$type* \n –í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞: *$time* \n –¢–µ–ª–µ–≥—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @$address')

    return t.substitute({
        'title': title,
        'name': name,
        'fullname': user.fullname,
        'phone': user.phone,
        'month': user.month,
        'date': user.date,
        'type': user.type,
        'time': user.time,
        'address': name
    })

def getRegData(user, title, name=''):
    t = Template('$title *$name* \n –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è: *$fullname* \n –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: *$phone* \n –ú–µ—Å—è—Ü –ø—Ä–∏–µ–º–∞: *$month* \n '
                 '–î–µ–Ω—å –ø—Ä–∏–µ–º–∞: *$date* \n –¢–∏–ø –ø—Ä–∏–µ–º–∞: *$type* \n –í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞: *$time* \n –ï—Å–ª–∏ –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, '
                 '–º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è. –ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–Ω–æ–≤–∞, –Ω–∞–∂–º–∏—Ç–µ /regüåπüåπüåπ   ')

    return t.substitute({
        'title': title,
        'name': name,
        'fullname': user.fullname,
        'phone': user.phone,
        'month': user.month,
        'date': user.date,
        'type': user.type,
        'time': user.time
    })

bot.enable_save_next_step_handlers(delay=2)
bot.load_next_step_handlers()


if __name__ == '__main__':
        bot.polling(none_stop=True)